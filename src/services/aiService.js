import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(API_KEY);

const model = genAI.getGenerativeModel({
  model: "gemini-2.5-pro",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function parseAIResponse(aiResponse) {
  try {
    const text = aiResponse.response.text();
    const cleanedText = text.replace(/```json\n|```/g, "").trim();
    return JSON.parse(cleanedText);
  } catch (error) {
    console.error(
      "Error parsing AI JSON response:",
      error,
      "Raw text:",
      aiResponse.response.text()
    );
    return { error: "Failed to parse AI response. Please try again." };
  }
}

export const extractResumeInfo = async (resumeText) => {
  console.log("--- LIVE AI: Extracting Resume Info ---");
  const prompt = `
    You are an expert HR recruitment assistant. Your task is to extract the full name, email address, and phone number from the provided resume text.
    Provide the output in a clean JSON format. If a field is not found, its value should be null.

    Resume Text:
    ---
    ${resumeText.substring(0, 4000)}
    ---

    JSON Output format:
    {
      "name": "...",
      "email": "...",
      "phone": "..."
    }
  `;
  try {
    const result = await model.generateContent(prompt);
    return await parseAIResponse(result);
  } catch (error) {
    console.error("Error in extractResumeInfo:", error);
    return { error: "AI service failed to extract resume information." };
  }
};

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

export const generateInterviewQuestions = async () => {
  console.log("LIVE AI: Generating Questions Sequentially");
  const generate = async (difficulty, count) => {
    const prompt = `
      You are a senior technical interviewer creating questions for a Full Stack Developer role with a focus on React and Node.js.
      Generate ${count} multiple-choice question(s) of '${difficulty}' difficulty.

      For each question, you MUST provide these exact keys:
      - "id": a unique string.
      - "text": the question text itself. This field is mandatory.
      - "difficulty": the difficulty level ('Easy', 'Medium', or 'Hard').
      - "timer": an integer for the timer in seconds (Easy: 20, Medium: 60, Hard: 120).
      - "options": an array of exactly 4 string options.
      - "correctAnswerIndex": the index (0-3) of the correct answer in the "options" array.

      Return the output as a valid JSON array of objects. Do not omit any fields.
    `;
    try {
      const result = await model.generateContent(prompt);
      return await parseAIResponse(result);
    } catch (error) {
      console.error(`Error generating ${difficulty} questions:`, error);
      return [{ error: `Failed to generate ${difficulty} questions.` }];
    }
  };

  try {
    let allQuestions = [];
    const questionLevels = ["Easy", "Medium", "Hard"];
    for (const level of questionLevels) {
      console.log(`Fetching ${level} questions...`);
      const result = await generate(level, 2); 
      if (result && !result.error) {
     
        console.log(`Raw response for ${level}:`, result);

        const validQuestions = result.filter(
          (q) =>
            q &&
            typeof q.text === "string" &&
            q.text.trim() !== "" &&
            Array.isArray(q.options) &&
            q.options.length === 4
        );
        allQuestions.push(...validQuestions);
      } else {
        console.error(`Failed to fetch or parse ${level} questions.`);
      }

     
      if (level !== "Hard") {
        await delay(15000); 
      }
    }

    if (allQuestions.length < 6) {
      console.warn(
        `Warning: Only generated ${allQuestions.length}/6 questions. Proceeding with available questions.`
      );
      if (allQuestions.length === 0)
        throw new Error("No valid questions were generated by the AI.");
    }

    allQuestions.forEach((q, index) => {
      q.id = `q${index + 1}`;
    });

    shuffleArray(allQuestions);
    console.log(
      `--- LIVE AI: Successfully Validated ${allQuestions.length} Questions ---`,
      allQuestions
    );
    return allQuestions;
  } catch (error) {
    console.error("Fatal error in generateInterviewQuestions:", error);
   
    return [
      {
        id: "q_mock",
        text: "The AI service is currently unavailable. This is a placeholder question. What is 2+2?",
        difficulty: "Easy",
        timer: 20,
        options: ["3", "4", "5", "6"],
        correctAnswerIndex: 1,
      },
    ];
  }
};

export const generateInterviewSummary = async (questions, answers) => {
  console.log("--- LIVE AI: Generating Summary ---");
  let correctAnswers = 0;
  answers.forEach((answer) => {
    const question = questions.find((q) => q.id === answer.questionId);
    if (
      question &&
      question.correctAnswerIndex === answer.selectedOptionIndex
    ) {
      correctAnswers++;
    }
  });
  const score = correctAnswers * 10;

  const interviewContext = questions.map((q, index) => {
    const answer = answers[index];
    const userAnswerText =
      answer.selectedOptionIndex !== null
        ? q.options[answer.selectedOptionIndex]
        : "Not Answered / Timed Out";
    const correctAnswerText = q.options[q.correctAnswerIndex];
    return {
      question: q.text,
      difficulty: q.difficulty,
      userAnswer: userAnswerText,
      correctAnswer: correctAnswerText,
      isCorrect: q.correctAnswerIndex === answer.selectedOptionIndex,
    };
  });

  const prompt = `
    You are a senior technical recruiter providing a final summary of a candidate's automated interview for a Full Stack (React/Node) role.
    The candidate's final score is ${score} out of ${questions.length * 10}.
    Analyze their performance based on the topics and difficulties of the questions they answered correctly and incorrectly.
    Provide a concise, qualitative summary (2-3 sentences).
    
    Interview Transcript:
    ---
    ${JSON.stringify(interviewContext, null, 2)}
    ---

    Return your response as a JSON object with a single "summary" key.
  `;

  try {
    const result = await model.generateContent(prompt);
    const parsedResult = await parseAIResponse(result);
    return {
      score,
      summary: parsedResult.summary || "Could not generate summary.",
    };
  } catch (error) {
    console.error("Error in generateInterviewSummary:", error);
    return {
      score,
      summary: "AI summary is unavailable due to a technical issue.",
    };
  }
};
